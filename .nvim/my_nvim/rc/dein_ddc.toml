# --------------------------------------
# ddc.vim
#
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = ['InsertEnter']
depends = ['denops.vim']
hook_source = '''
call ddc#custom#patch_global('ui', 'pum')
call ddc#custom#patch_global('sources', [
  \   'around',
  \   'vsnip',
  \   'nvim-lsp',
  \   'skkeleton',
  \ ])
call ddc#custom#patch_global('sourceOptions', {
  \   '_': {
  \     'matchers': ['matcher_head'],
  \     'sorters': ['sorter_rank'],
  \     'converters': ['converter_remove_overlap'],
  \   },
  \   'around': {
  \     'mark': 'Around',
  \   },
  \   'vsnip': {
  \     'mark': 'Snippet',
  \   },
  \   'nvim-lsp': {
  \     'mark': 'LSP',
  \     'forceCompletionPattern': '\.\w*|:\w*|->\w*',
  \   },
  \   'skkeleton': {
  \     'mark': 'SKK',
  \     'matchers': ['skkeleton'],
  \     'sorters': [],
  \     'minAutoCompleteLength': 2,
  \     'isVolatile': v:true,
  \   },
  \ })
call ddc#custom#patch_global('autoCompleteEvents', [
  \   'CmdlineChanged',
  \   'InsertEnter',
  \   'TextChangedI',
  \   'TextChangedP',
  \ ])

inoremap <C-n>  <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-p>  <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-y>  <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>  <Cmd>call pum#map#cancel()<CR>
nnoremap :      <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  cnoremap <Tab>    <Cmd>call pum#map#insert_relative(+1)<CR>
  cnoremap <S-Tab>  <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-n>    <Cmd>call pum#map#insert_relative(+1)<CR>
  cnoremap <C-p>    <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y>    <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>    <Cmd>call pum#map#cancel()<CR>

  " Overwrite sources
  if !exists('b:prev_buffer_config')
    let b:prev_buffer_config = ddc#custom#get_buffer()
  endif
  call ddc#custom#patch_buffer('cmdlineSources',
    \ ['necovim', 'around'])

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd InsertEnter <buffer> ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
endfunction

function! CommandlinePost() abort
  silent! cunmap <Tab>
  silent! cunmap <S-Tab>
  silent! cunmap <C-n>
  silent! cunmap <C-p>
  silent! cunmap <C-y>
  silent! cunmap <C-e>

  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif
endfunction

call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = ['ddc.vim']

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
if = 0
on_source = ['ddc.vim']
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
if = 0
on_source = ['ddc.vim']
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_source = ['ddc.vim']
hook_source = '''
let g:vsnip_snippet_dir = expand($XDG_CONFIG_HOME . '/' . $NVIM_APPNAME . '/vsnip')
imap <expr> <C-x>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'    : '<C-x>'
smap <expr> <C-x>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'    : '<C-x>'
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)' : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)' : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = ['ddc.vim']

[[plugins]]
repo = 'vim-skk/skkeleton'
on_source = ['ddc.vim']
hook_source = '''
call skkeleton#config({
  \   'eggLikeNewline': v:true,
  \   'globalDictionaries': [
  \     '~/.skk/SKK-JISYO.L',
  \     '~/.skk/SKK-JISYO.jinmei',
  \   ]
  \ })
imap <C-j> <Plug>(skkeleton-enable)
cmap <C-j> <Plug>(skkeleton-enable)
'''
