" https://rbtnn.hateblo.jp/entry/2014/11/30/174749
set encoding=utf-8
scriptencoding utf-8

filetype off
filetype plugin indent off
syntax off


" https://github.com/vim/vim/issues/390
set t_u7=


" --------------------------------------
" Variable
"
let g:markdown_recommended_style = 0
let g:netrw_banner = 0
let g:netrw_dirhistmax = 1
let g:netrw_hide = 0
let g:netrw_home = $XDG_CONFIG_HOME->expand() .. '/vim'
let g:netrw_liststyle = 0
let g:vim_indent_cont = 0

let g:auto_reload = timer_start(
\   1000,
\   {-> execute('silent! checktime')},
\   {'repeat': -1}
\ )


" --------------------------------------
" hook_source
"
call my_util#set_preload_vimrc($XDG_CONFIG_HOME->expand() .. '/vim/local_sample.vim')


" --------------------------------------
" Option
"
" System
if has('unix')
  language messages C
else
  language messages en
endif
if has('mac')
  set clipboard&
  set clipboard+=unnamedplus,unnamed
elseif has('unix') && !has('win32unix')
  set clipboard&
  set clipboard^=unnamedplus
endif
" set belloff=all
set autoread
set backupdir=~/.cache/vim
set directory=~/.cache/vim
set undodir=~/.cache/vim

" Edit
" set binary noeol
" set isfname-=|
set backspace=indent,eol,start
set completeopt=menuone,noinsert,noselect
set fileencodings=utf-8,euc-jp,cp932
set fileformat=unix
set fileformats=unix,dos,mac
set hidden
set nofoldenable autoindent expandtab
set nrformats=unsigned
set shiftwidth=4 softtabstop=4 tabstop=4
set virtualedit=block

" Search
if executable('rg')
  " let &grepprg = 'rg --vimgrep --no-heading -uu'
  let &grepprg = 'rg --vimgrep --no-heading'
  set grepformat=%f:%l:%c:%m
endif
set hlsearch
set ignorecase
set incsearch
set shortmess+=cS
set smartcase
set wrapscan

" View
set ambiwidth=double
set nowrap
set number
set relativenumber

" Window
set noequalalways
set pumheight=10
set splitbelow
set splitright
set wildmenu wildoptions=pum,tagfile wildchar=<Tab>

" CommandLine
set cmdheight=1
set noshowcmd

" StatusLine
" set fillchars+=stl:\ ,stlnc:\_
set laststatus=2
set noshowmode

" TabLine
set showtabline=2

" Highlight
set colorcolumn=80
" set cursorcolumn
set cursorline
set diffopt=internal,filler,algorithm:histogram,indent-heuristic
set showmatch matchtime=1 matchpairs+=\<:\>
" space:\\u2423,extends:\\u00BB,precedes:\\u00AB
" set list listchars=space:␣,tab:>-,trail:~,nbsp:%,extends:»,precedes:«
set list listchars=tab:>-,trail:~,nbsp:%,extends:»,precedes:«

" Abbreviation
" :w' --> :w
cnoreabbrev w' w
" :w\ --> :w
cnoreabbrev w\ w


" --------------------------------------
" Keymap
"
nnoremap <expr> j (v:count == 0) ? 'gj' : 'j'
nnoremap <expr> k (v:count == 0) ? 'gk' : 'k'
xnoremap <expr> j ((v:count == 0) && (mode() ==# 'v')) ? 'gj' : 'j'
xnoremap <expr> k ((v:count == 0) && (mode() ==# 'v')) ? 'gk' : 'k'

" Insert Mode
" i_CTRL-T Insert one indent
" i_CTRL-D Delete one indent
inoremap ,today <C-r>=strftime('%Y-%m-%d')<CR>
inoremap ,now <C-r>=strftime('%Y-%m-%d %X +0900')<CR>

" pair
command! Lprevious  try | lprevious | catch | llast   | catch | endtry
command! Lnext      try | lnext     | catch | lfirst  | catch | endtry
nnoremap <C-p> :Lprevious<CR>
nnoremap <C-n> :Lnext<CR>

" Resize Window
nnoremap <S-Down>  <C-w>1-
nnoremap <S-Up>    <C-w>1+
nnoremap <S-Right> <C-w>5>
nnoremap <S-Left>  <C-w>5<

" https://lambdalisue.hatenablog.com/entry/2015/12/25/000046
" Edit
nnoremap <Plug>(my-Edit) <Nop>
nmap <Space>e <Plug>(my-Edit)
nnoremap <Plug>(my-Edit)r <Cmd>%s/\r$//e<CR>
nnoremap <Plug>(my-Edit)s <Cmd>%s/\s\+$//e<CR>

" Filer
nnoremap <Plug>(my-Filer) <Nop>
nmap <Space>f <Plug>(my-Filer)
nnoremap <Plug>(my-Filer)c <Cmd>15Lexplore<CR>
nnoremap <Plug>(my-Filer)g <Cmd>execute 'edit' g:my_gtd_path<CR>
if exists('*my_util#get_loaded_vimrc_path_list')
  nnoremap <Plug>(my-Filer)l <Cmd>execute 'edit' my_util#get_last_loaded_local_vimrc_path()<CR>
endif
nnoremap <Plug>(my-Filer)o <Cmd>execute '15Lexplore' '%:p:h'->expand()<CR>
nnoremap <Plug>(my-Filer)s <Cmd>execute 'edit' g:my_skk_path<CR>
nnoremap <Plug>(my-Filer)v <Cmd>execute 'edit' $MYVIMRC<CR>

" eNcoding
nnoremap <Plug>(my-eNcoding) <Nop>
nmap <Space>n <Plug>(my-eNcoding)
nnoremap <Plug>(my-eNcoding)ec <Cmd>setlocal fileencoding=cp932<CR>
nnoremap <Plug>(my-eNcoding)ee <Cmd>setlocal fileencoding=euc-jp<CR>
nnoremap <Plug>(my-eNcoding)eu <Cmd>setlocal fileencoding=utf-8<CR>
nnoremap <Plug>(my-eNcoding)fd <Cmd>edit ++fileformat=dos<CR>
nnoremap <Plug>(my-eNcoding)fu <Cmd>edit ++fileformat=unix<CR>
nnoremap <Plug>(my-eNcoding)nc <Cmd>edit ++encoding=cp932<CR>
nnoremap <Plug>(my-eNcoding)ne <Cmd>edit ++encoding=euc-jp<CR>
nnoremap <Plug>(my-eNcoding)nu <Cmd>edit ++encoding=utf-8<CR>

" Switch
nnoremap <Plug>(my-Switch) <Nop>
nmap <Space>s <Plug>(my-Switch)
nnoremap <Plug>(my-Switch)b <Cmd>setlocal scrollbind! scrollbind?<CR>
nnoremap <Plug>(my-Switch)n <Cmd>setlocal number! number?<CR>
nnoremap <Plug>(my-Switch)p <Cmd>setlocal paste! paste?<CR>
nnoremap <Plug>(my-Switch)r <Cmd>setlocal relativenumber! relativenumber?<CR>
nnoremap <Plug>(my-Switch)s <Cmd>setlocal spell! spell?<CR>
nnoremap <Plug>(my-Switch)t <Cmd>setlocal expandtab! expandtab?<CR>
nnoremap <Plug>(my-Switch)w <Cmd>setlocal wrap! wrap?<CR>


" --------------------------------------
" Command
"
command! -nargs=? C call s:copy2clip(<q-args>)
function s:copy2clip(...) abort
  if a:0 >= 1
    call setreg('+', getreg(a:1))
  else
    call setreg('+', getreg('"'))
  endif
endfunction

command! -nargs=? CW call s:copy2clip_wsl(<q-args>)
function s:copy2clip_wsl(...) abort
  if a:0 >= 1
    if has('win32unix')
      call system('clip.exe', getreg(a:1))
    else
      call system('clip.exe', system('nkf -sc', getreg(a:1)))
    endif
  else
    if has('win32unix')
      call system('clip.exe', getreg('"'))
    else
      call system('clip.exe', system('nkf -sc', getreg('"')))
    endif
  endif
endfunction

command! CreateLocalVim
\ call system('echo "let g:mnh_header_level_shift = 7" > ./local.vim')

command! GitDiff
\ tabnew
\ | setlocal buftype=nofile bufhidden=delete noswapfile
\ | setfiletype gitcommit
\ | execute 'read !git diff #'
\ | normal! gg


" --------------------------------------
" Aucocommand
"
function! s:set_register() abort
  if empty(&buftype)
    call setreg('a', expand('%')->fnamemodify(':p:~'))
    call setreg('b', expand('%')->fnamemodify(':p:~:h'))
    call setreg('c', expand('%')->fnamemodify(':p:~:t'))
    call setreg('d', expand('%')->fnamemodify(':p:~:t:r'))

    let l:dir_status = '['
    let l:dir_status ..= 'CWD:' .. fnamemodify(getcwd(), ':~')
    let l:dir_status ..= '  ' .. 'Cfg:' .. fnamemodify(my_util#get_last_loaded_local_vimrc_path(), ':h:t')
    let l:dir_status ..= ']'
    call setreg('z', l:dir_status)
  endif
endfunction

function! s:my_asyncjob_on_save() abort
  if (&filetype == 'python') || ('%:p:e'->expand() == 'ipynb')
    " Jupyter Notebook
    let l:ipynb_path = '%:p:r'->expand() .. '.ipynb'
    if filereadable(l:ipynb_path) && executable('jupytext')
      call my_async#jobstart('jupytext --set-formats ipynb,py:percent --sync ' .. l:ipynb_path)
    endif
  elseif index([
  \ 'markdown',
  \ 'quarto',
  \ 'rmd',
  \ ], &filetype) >= 0
    if exists(':NumberHeader') == 2
      execute 'NumberHeader'
    endif
  elseif &filetype == 'mermaid'
    let l:filename = '%:p:r'->expand()
    if executable('mmdc')
      call my_async#jobstart('mmdc -i ' .. l:filename .. '.mmd -o ' .. l:filename .. '.svg')
    endif
  elseif index([
  \ 'terraform',
  \ 'terraform-vars',
  \ 'tf',
  \ ], &filetype) >= 0
    if executable('terraform')
      call my_async#jobstart('terraform fmt ' .. '%:p'->expand())
      " execute 'LspDocumentFormatSync'
    endif
  else
    " Do nothing.
  endif
endfunction


augroup MyVimrc
  autocmd!
  autocmd BufEnter * call s:set_register()
  autocmd BufWritePost * call s:my_asyncjob_on_save()
augroup END


" --------------------------------------
" dpp.vim
"
let s:dpp_path = $XDG_CONFIG_HOME->expand() .. '/vim/dpp/dpp.vim'
if filereadable(s:dpp_path) && !exists('*dpp#min#load_state')
  execute 'source' s:dpp_path
endif


" --------------------------------------
" End of setting
"
set background=dark
filetype plugin indent on
syntax enable

if has('termguicolors')
  set termguicolors
endif

execute 'colorscheme' get(g:, 'colors_name', 'retrobox')
