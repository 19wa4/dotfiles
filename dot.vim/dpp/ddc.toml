[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = ['DenopsProcessStarted']
hook_source = '''
let s:sources_list = [
  \   'around',
  \   'skkeleton',
  \   'denippet',
  \   'lsp',
  \ ]

call ddc#custom#patch_global('ui', 'pum')
call ddc#custom#patch_global('sources', s:sources_list)
call ddc#custom#patch_global('sourceOptions', #{
  \   _: #{
  \     matchers: ['matcher_head'],
  \     sorters: ['sorter_rank'],
  \     converters: ['converter_remove_overlap'],
  \   },
  \ })
call ddc#custom#patch_global('sourceOptions', #{
  \   around: #{
  \     mark: 'around',
  \   },
  \ })
call ddc#custom#patch_global('sourceOptions', #{
  \   denippet: #{
  \     mark: 'denippet',
  \   },
  \ })
call ddc#custom#patch_global('sourceOptions', #{
  \   skkeleton: #{
  \     mark: 'skk',
  \     matchers: [],
  \     sorters: [],
  \     converters: [],
  \     isVolatile: v:true,
  \     minAutoCompleteLength: 1,
  \   },
  \ })
call ddc#custom#patch_global('sourceOptions', #{
  \   lsp: #{
  \     mark: 'lsp',
  \     forceCompletionPattern: '\.\w*|:\w*|->\w*',
  \   },
  \ })
call ddc#custom#patch_global('sourceParams', #{
  \   lsp: #{
  \     snippetEngine: denops#callback#register({
  \       body -> denippet#anonymous(body)
  \     }),
  \     enableResolveItem: v:true,
  \     enableAdditionalTextEdit: v:true,
  \   }
  \ })
if has('nvim')
  call ddc#custom#patch_global('sourceParams', #{
    \   lsp: #{
    \     lspEngine: 'nvim-lsp',
    \   }
    \ })
else
  call ddc#custom#patch_global('sourceParams', #{
    \   lsp: #{
    \     lspEngine: 'vim-lsp',
    \   }
    \ })
endif
call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = ['ddc.vim']
hook_source = '''
inoremap <C-n>  <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-p>  <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-y>  <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>  <Cmd>call pum#map#cancel()<CR>
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
on_source = ['ddc.vim']
hook_source = '''
let s:base_path = '~/.cache/dpp/repos/github.com/skk-dev/dict/'->expand()
call skkeleton#config({
  \   'globalDictionaries': [
  \     s:base_path .. 'SKK-JISYO.L',
  \     s:base_path .. 'SKK-JISYO.jinmei',
  \   ],
  \ })
imap <C-j> <Plug>(skkeleton-enable)
cmap <C-j> <Plug>(skkeleton-enable)
'''

[[plugins]]
repo = 'skk-dev/dict'

[[plugins]]
repo = 'uga-rosa/denippet.vim'
on_source = ['ddc.vim']
hook_source = '''
let s:dir = $MYVIMRC->expand()->fnamemodify(':h') .. '/snippet_json/'
for s:file in glob(s:dir . '*.*', 1, 1)
  call denippet#load(s:file)
endfor
'''
